June 2024

TODO
1. Convert the moves into next states
2. Create a parent position from which the game starts
4. Refactor get Game.legal_moves to make it smaller - DONE
3. Be able to return to that parent position without creating a new instance of a class

6/6/2024
TODO
5. Create test for the Game class for these new functionalities
    5.1 Create a Game folder the the game tests if necessary - DONE


To convert the moves into next states, we can create a class that inherits from the Game
Class, in which we can create a move:state dictionary.

6. Creat tests for MCST
    A. Create test where the game is in a next to CheckMate (White) - Done

-------------------------------------------------------------
6/7/2024
1. Delete Django from the Project - Done
2. Create tests for MCST
    A. Create test where the game is in a next to CheckMate (Black) - Done

6/8/2024
1. Create a Checkmate detection - Done - Finished on 6/10/2024
2. Check the way the get legal moves are being calculated
    A. It is possible that we are using a method that is deprecated

6/10/2024
1. Finish Checkmate detection

6/11/2024
1. Integrates Checkmate detection into MCST - Done

2. Solve issue with the list of moves being empty on
    GameStateNode.simulate, 'move = np.random.choice(moves)'
    line 422 apx

3. Solve issue withe he list of untried moves being empty on
    GameStateNode.retrieve_move_from_untried_moves;
    This might be related to point 2 above


6/12/2024

1. Separate some of the methods used in Game to it own classes - Done
2. Write a Board encoder to prepare for the NN

6/13/2024

1. Write the first Neural Network

6/15/2024

1. Continue with the development of the NN